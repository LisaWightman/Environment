#
# Keyboard
#
keyboard_repeat_enabled() {
    defaults write -g ApplePressAndHoldEnabled -bool false
    echo "you must restart running apps for the change to take affect"
}
keyboard_repeat_disabled() {
    defaults write -g ApplePressAndHoldEnabled -bool true
    echo "you must restart running apps for the change to take affect"
}

#
# Keyboard Shortcuts
#
shortcut_dictionary_disable() {
    defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 70 '<dict><key>enabled</key><false/></dict>'
}

#
# Dock
#
dock_translucent_hiddens() {
    defaults write com.apple.Dock showhidden -bool YES
    killall Dock
}
dock_notranslucent_hiddens() {
    defaults write com.apple.Dock showhidden -bool NO
    killall Dock
}
dock_faster_animation() {
    defaults write com.apple.dock autohide-time-modifier -float 0.5
    killall Dock
}
dock_lock() {
    defaults write com.apple.dock contents-immutable -bool true
    killall Dock
}
dock_unlock() {
    defaults write com.apple.dock contents-immutable -bool false
    killall Dock
}
dock_add_spacer() {
    defaults write com.apple.dock persistent-apps -array-add '{"tile-type"="spacer-tile";}'
    killall Dock
}

#
# Spotlight
#
spotlight_disable() {
    jjv_sudo mdutil -a -i off
}
spotlight_enable() {
    jjv_sudo mdutil -a -i on
}

#
# Finder
#
finder_show_hiddens() {
    defaults write com.apple.Finder AppleShowAllFiles YES
    killall Finder
}
finder_hide_hiddens() {
    defaults write com.apple.Finder AppleShowAllFiles NO
    killall Finder
}

#
# Environmental Variables
#
env_set_plist_var() {
    /usr/libexec/PlistBuddy -c 'Delete :'"$1" ~/.MacOSX/environment.plist
    /usr/libexec/PlistBuddy -c 'Add :'"$1"' string "'"$2"'"' ~/.MacOSX/environment.plist
}

env_set_var() {
    eval export $1="$2"
    env_set_plist_var "$1" "$2"
}

#
# Volume
#
volume_set() {
    local vol=$1;
    jjv_sudo "osascript -e 'set Volume $vol'"
}

volume_mute() {
    volume_set 0
}

#
# Misc
#
back_to_my_mac() {
	local hostname=$(echo -n $1 | sed 's/ /-/g')
	echo "Connecting to ${hostname}.jvinding.members.mac.com"
	ssh ${hostname}.jvinding.members.mac.com.
}

alias lock='/System/Library/CoreServices/"Menu Extras"/User.menu/Contents/Resources/CGSession -suspend'

#
# Development
#
alias dev_enable='jjv_sudo dscl . append /Groups/_developer GroupMembership $(whoami)'

#
# Trouble Shooting
#
alias mac_assertions='pmset -g assertions' #  useful for figuring out why the machine won't sleep
# see also http://hints.macworld.com/article.php?story=20120701234338952

mac_entitlements() {
    # see also http://hints.macworld.com/article.php?story=20120625231307279
    if [ -z "$1" ]; then
        echo You must specify the path to the app
        return;
    else
        codesign -dvvv --entitlements - "$1"
    fi
}

retina_show_upscaled() {
    # see also http://hints.macworld.com/article.php?story=20120620224651723
    defaults write -g CGContextHighlight2xScaledImages YES
}

#
# Dashboard
#
mac_disable_dashboard() {
    defaults write com.apple.dashboard mcx-disabled -boolean YES
    killall Dock
}

#
# DNS
#
mac_flush_dns() {
    dscacheutil -flushcache
}

#
# Quicklook
#
ql() { qlmanage -p "$@" >& /dev/null & }

ql_select_text() {
    defaults write com.apple.finder QLEnableTextSelection -bool true && killall Finder
}
