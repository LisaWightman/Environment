call pathogen#infect()
syntax on
color torte

"
" set indentation options
"
set ts=4
set shiftwidth=4
set expandtab autoindent smartindent
set ruler showcmd wildmenu nohlsearch
set title titlestring=

set vb t_vb=

set nocompatible        " Use Vim defaults (much better!)
set bs=2                " backspace over newlines and all

let mapleader=","
nnoremap ,, ,

nmap ; :
nnoremap ;; ;

map <C-l> :syn sync fromstart<CR>
map <A-n> :set number!<CR> " show line numbers

map! <C-s> <ESC>:w<CR> " save
nmap <C-s> :w<CR>

"
" set up some insert mode mappings
"
"imap ,setmark <ESC>maa
"imap ,gotomark <ESC>`aa
"
"imap ,shebang #!/home/jvinding/bin/perl<CR>use warnings;<CR>use strict;<CR><CR>
"
"imap ,perlif if (,setmark)<CR>{<CR>}
"imap ,ifo ,perlif,gotomark
"imap ,ife ,perlif<CR>else<CR>{<CR>},gotomark
"imap ,for for (,setmark;;)<CR>{<CR>},gotomark
"
"imap _tclif if {,setmark} {<CR>}
"imap _ifo _tclif,gotomark
"imap _ife _tclif else {<CR>},gotomark
"imap _for for {,setmark} {} {} {<CR>},gotomark

"
"
"
:map! <S-space><S-space> <esc>

nmap <unique>	<C-/>	<Plug>FtcTc
vmap <unique>	<C-/>	<Plug>FtcTc
imap <unique>	<C-/>	<esc><Plug>FtcTc

"
" remove toolbar and tearoff menus in gui mode
"
"" let &guioptions = substitute(&guioptions, "[Tt]", "", "g")

"" :if &term =~ "xterm"
""     :if has("terminfo")
""     :  set t_Co=16
""     :  set t_AB=[%?%p1%{8}%<%t%p1%{40}%+%e%p1%{92}%+%;%dm
""     :  set t_AF=[%?%p1%{8}%<%t%p1%{30}%+%e%p1%{82}%+%;%dm
""     :endif
"" :endif
"map ,d :source ~/.vim/dvorak<CR>
"map ,q :source ~/.vim/qwerty<CR>

nmap <Leader>c :cclose<CR>
nmap <Leader>f :Find()<CR>
function! Find()
    let l:name=input("File pattern: ",expand("%:t:r"))
    if !empty(name)
        let l:list=system("find . -type d \\( -name .git -o -name target \\) -prune -o -type f -not -name \".*\" -type f -iname '*".l:name."*' -print")
        let l:num=strlen(substitute(l:list, "[^\n]", "", "g"))
        if l:num < 1
            echo "'".name."' not found"
            return
        endif
        if l:num == 1
            exe "open " . substitute(l:list, "\n", "", "g")
        else
            let tmpfile = tempname()
            exe "redir! > " . tmpfile
            silent echon l:list
            redir END
            let old_efm = &efm
            set efm=%f

            if exists(":cgetfile")
                execute "silent! cgetfile " . tmpfile
            else
                execute "silent! cfile " . tmpfile
            endif

            let &efm = old_efm

            " Open the quickfix window below the current window
            botright copen

            call delete(tmpfile)
        endif
    endif
endfunction

command! -nargs=1 Find :call Find()

"============[ everything below this is from http://is.gd/IBV2013 ]============"

" highlight 106th column of wide lines...
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%106v', 100)

"====[ Make tabs, trailing whitespace, and non-breaking spaces visible ]======
exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
set list

"===================================[ END ]===================================="

"
" Easy Motion
"
let g:EasyMotion_smartcase = 1
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1

map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>h <Plug>(easymotion-linebackward)
