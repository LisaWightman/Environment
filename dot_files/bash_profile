################################ set shell opts ################################
#
#
## export HOME=/localtmp/jvinding
umask 002
export EDITOR=vi
if [ $BASH ]
then
    set -o vi
    shopt -s checkwinsize
else
    export ENV=~/.bashrc
fi

export HISTSIZE=1000
export HISTFILESIZE=1000
export HISTCONTROL=ignoredups
#
#
############################## end set shell opts ##############################

####################### source server specific settings  #######################
#
#
HOSTNAME=`uname -n`
HOSTNAME=${HOSTNAME%%.*}
[ -f ~/Environment/Machines/$HOSTNAME ] && . ~/Environment/Machines/$HOSTNAME
#
#
##################### end source server specific settings  #####################

##################################### PATH #####################################
#
# let's setup the PATH so it works across many different machines
# but doesn't get cluttered up w/ non-existant dirs
#

#
# ~/bin and ~jvinding/bin for when i do su - <whoever>
#
for p in  $SERVERPATH ~/bin /usr/local/bin ~/Environment/bin
do
    if [ -d "$p" ] && ! echo $PATH | egrep "(^|:)$p($|:)" > /dev/null
    then
        PATH=$p:$PATH
    fi
done
export PATH
#
#
################################### end PATH ###################################

############################### LD_LIBRARY_PATH  ###############################
#
# read comment for PATH above
#
for p in /usr/local/lib /data/advantage/perl-5.8.0/lib/5.8.0 $SERVERLDPATH
do
    if [ -d $p ] && ! echo $LD_LIBRARY_PATH | egrep "(^|:)$p($|:)" > /dev/null
    then
        LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$p
    fi
done
LD_LIBRARY_PATH=${LD_LIBRARY_PATH#:}
export LD_LIBRARY_PATH
#
#
############################### LD_LIBRARY_PATH  ###############################

################################## other vars ##################################
#
#
export DISPLAY=${SSH_CLIENT%% *}:0
if [ $BASH ]
then
    export HISTIGNORE='l:l[sa]:lsd'
fi
#
#
################################ end other vars ################################

##################################### misc #####################################
#
# this is here instead of at the end, because on some machines
# a PROMPT_COMMAND is getting set in /etc/bashrc
#
[ $BASH ] && [ -f ~/.bashrc ] && . ~/.bashrc
#
#
################################### end misc ###################################

#################################### prompt ####################################
#
#
#Black       0;30     Dark Gray     1;30
#Blue        0;34     Light Blue    1;34
#Green       0;32     Light Green   1;32
#Cyan        0;36     Light Cyan    1;36
#Red         0;31     Light Red     1;31
#Purple      0;35     Light Purple  1;35
#Brown       0;33     Yellow        1;33
#Light Gray  0;37     White         1;37
BLACK="\[\033[0;30m\]"  # black
BLUE="\[\033[0;34m\]"   # blue
GREEN="\[\033[0;32m\]"  # green
CYAN="\[\033[0;36m\]"   # cyan
RED="\[\033[0;31m\]"    # red
PURPLE="\[\033[0;35m\]" # purple
BROWN="\[\033[0;33m\]"  # brown
GREY="\[\033[1;30m\]"   # grey
# enhanced
eGREY="\[\033[0;37m\]"   # light gray
eBLUE="\[\033[1;34m\]"   # light blue
eGREEN="\[\033[1;32m\]"  # light green
eCYAN="\[\033[1;36m\]"   # light cyan
eRED="\[\033[1;31m\]"    # light red
ePURPLE="\[\033[1;35m\]" # light purple
eYELLOW="\[\033[1;33m\]" # yellow
eWHITE="\[\033[1;37m\]"  # white
# reset to teminal default
NORMAL="\[\033[0;0m\]"  # normal term color


if [ $BASH ]
then
    #
    # these are various ways of shortening the path for display
    #
    function chop_to_length {
        local pwd_length=50
        _TMP_PWD=${PWD/$HOME/~}
        if [ ${#_TMP_PWD} -gt $pwd_length ]
        then
            _TMP_PWD="...${_TMP_PWD:$(( ${#_TMP_PWD} - $pwd_length )):$pwd_length}"
        fi
    }
    function chop_middle_dirs {
        local pwd_length=50
        _TMP_PWD=${PWD/$HOME/~}
        if [ ${#_TMP_PWD} -gt $pwd_length ]
        then
            _TMP_PWD=$(echo -n ${_TMP_PWD#/} | perl -e'
                $_ = <>;
                @d=split m!/!; $l = @d - 2;
                print qq!/$d[0]/...$l.../$d[-1]!')
        fi
    }
    function chop_front_dirs_to_fit {
        local pwd_length=50
        _TMP_PWD="${PWD/$HOME/~}"
        _TMP_PWD=$(echo -n "${_TMP_PWD#/} $pwd_length" | perl -e'
            my $arg = <>;
            my ($dir, $len) = $arg =~ /(\S*(?:\s\S*)*)\s(\S+)/;
            my @d = split m!/!, $dir;
            my $p = "";
            while (length $p < $len && @d) {
                my $part = pop @d;
                $part = "/" . $part if $part ne "~";
                $p = $part . "$p" if ((length $p + length $part) < $len);
            }
            $p = "..." . scalar @d . "...$p" if @d;
            print $p;')
    }

    function scm_status {
        _TMP_SCM_BRANCH=$(git symbolic-ref --short HEAD 2> /dev/null)
        if [ -z "${_TMP_SCM_BRANCH}" ]; then
            _TMP_SCM_STATUS="N/A"
            if [ -d .svn ]; then
                _TMP_SCM_BRANCH=$(svn info | grep ^URL | sed -e's!.*/\([^/]*\)!\1!')
            else
                _TMP_SCM_BRANCH="N/A"
            fi
        else
            _TMP_SCM_STATUS=$(git status -sb | sed -n '/\[/ { s/^[^[]*\[//; s/\][^]]*$//; s/ahead \([0-9]*\)[, ]*/â†‘\1/; s/behind \([0-9]*\)/â†“\1/; p; }')
        fi
        if [ -z "${_TMP_SCM_STATUS}" ]; then
            _TMP_SCM_STATUS="OK"
        fi
    }

    function prompt_command {
        chop_front_dirs_to_fit
        if [ "$TERM" = "xterm" ]
        then
            echo -e "\033]0;${USER}@${HOSTNAME}:$_TMP_PWD\007"
        fi

        if [ "$_TMP_PWD" == "~" ]; then
            _LAST_DIR="~"
            _TMP_PWD=
        else
            _LAST_DIR=${_TMP_PWD##*/}
            _TMP_PWD=${_TMP_PWD%/*}/
        fi
        scm_status
    }

    export PROMPT_COMMAND=prompt_command
    PROMPT_CLEAR_TO_COL_1="\[\033[G\]"
    PROMPT_SCM_BRANCH="$BLUE-=($GREEN\$_TMP_SCM_BRANCH$BLUE)=-"
    PROMPT_SCM_STATUS="$BLUE-=($RED\$_TMP_SCM_STATUS$BLUE)=-"
    PROMPT_PWD="$BLUE-=($RED\${_TMP_PWD}$GREEN\${_LAST_DIR}$BLUE)=-"
    PROMPT_RETURN="$BLUE-=($RED\$?$BLUE)=-"
##    PROMPT_HISTORY="$BLUE-=($RED\!$BLUE)=-"
    PROMPT_JOBS="$BLUE-=($RED\j$BLUE)=-"
    PROMPT_USER="$BLUE-=($RED\\u"
    PROMPT_HOST="@\\h$BLUE)=-"
    PROMPT_PROMPT="$CYAN \\$ $NORMAL"
    PROMPT_LINE_1="$PROMPT_PWD"
    PROMPT_LINE_2="$PROMPT_SCM_BRANCH$PROMPT_SCM_STATUS$PROMPT_RETURN$PROMPT_JOBS"
    PROMPT_LINE_3="$PROMPT_USER$PROMPT_HOST$PROMPT_PROMPT"
    export PS1="$GREEN/$PROMPT_LINE_1\n$GREEN>$PROMPT_LINE_2\n$GREEN\\\\$PROMPT_LINE_3"
##  export PS1='\[\033]0;\u@\h:$_TMP_PWD\007\]($?) [\u@\h] \$ '
else
    if [ "$TERM" = "xterm" ] || [ "$TERM" = "cygwin" ]
    then
        export PS1=']0;$USER@$HOSTNAME:$PWD($?) [$USER@$HOSTNAME] \$ '
    else
        export PS1='($?) [$USER@$HOSTNAME] \$ '
    fi
fi
#
#
################################## end prompt ##################################
