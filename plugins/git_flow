#
# helpers
__git_flow_assert_clean_tree() {
    git_assert_clean_tree || return 1
    ## fail if the repo isn't configured for git-flow
    git config --get gitflow.branch.develop > /dev/null || ( echo "Not a git-flow repo"; return 1 )
}

__git_flow_branch_name() {
  local branch_type=$1
  local branch_name=$2
  if [ -z "${branch_name}" ]; then
      local current_branch=$(git_get_branch)
      if [[ "${current_branch}" == ${branch_type}* ]]; then
        branch_name=$current_branch
      fi
  fi

  echo -n ${branch_name#${branch_type}}
}

__git_flow_feature_branch_name() {
    __git_flow_branch_name "$(git config --get gitflow.prefix.feature)" "$1"
}

__git_flow_hotfix_branch_name() {
    __git_flow_branch_name "$(git config --get gitflow.prefix.hotfix)"
    "$1"
}

__git_flow_release_branch_name() {
    __git_flow_branch_name "$(git config --get gitflow.prefix.release)" "$1"
}

git_flow_feature_start() {
  __git_flow_assert_clean_tree || return 1

  local feature_name=$(__git_flow_feature_branch_name "$1")
  if [ -z "$feature_name" ]; then
    echo "Usage: gffs <feature name>"
    echo "e.g.:"
    echo "     gffs things_and_stuff"
    return 1
  fi

  git checkout $(git config --get gitflow.branch.develop) || return 1
  git pull --rebase || return 1

  git flow feature start $feature_name
}

git_flow_feature_finish() {
  __git_flow_assert_clean_tree || return 1

  local feature_name=$(__git_flow_feature_branch_name "$1")
  if [ -z "$feature_name" ]; then
    echo "Usage: git_flow_feature_finish <feature name>"
    echo "e.g.:"
    echo "     git_flow_feature_finish things_and_stuff"
    return 1
  fi

  git checkout $(git config --get gitflow.branch.develop) || return 1
  git pull --rebase || return 1

  git flow feature finish $feature_name || return 1

  git push --all origin
  git push --tags origin
}

#
# Release
#
git_flow_release_start() {
  __git_flow_assert_clean_tree || return 1

  local version=$(__git_flow_release_branch_name "$1")
  if [ -z "$version" ]; then
    echo "Usage: gfrs <version>"
    echo "e.g.:"
    echo "     gfrs 1.3"
    return 1
  fi

  git checkout $(git config --get gitflow.branch.develop) || return 1
  git pull --rebase || return 1

  git flow release start $version
}

git_flow_release_finish() {
  __git_flow_assert_clean_tree || return 1

  local version=$(__git_flow_release_branch_name "$1")
  if [ -z "$version" ]; then
    echo "usage: git_flow_release_finish <version>"
    echo "e.g.:"
    echo "     git_flow_release_finish 2.8.3"
    return 1
  fi

  git checkout $(git config --get gitflow.branch.master) || return 1
  git pull --rebase || return 1

  git checkout $(git config --get gitflow.branch.develop) || return 1
  git pull --rebase || return 1

  git checkout $(git config --get gitflow.prefix.release)$version || return 1
  git pull --rebase || return 1

  git flow release finish $version

  git push --all origin
  git push --tags origin
}

#
# Hotfix
#
git_flow_hotfix_start() {
  __git_flow_assert_clean_tree || return 1

  local version=$(__git_flow_hotfix_branch_name "$1")
  if [ -z "$version" ]; then
    echo "Usage: git_flow_hotfix_start <version>"
    echo "e.g.:"
    echo "     git_flow_hotfix_start 2.8.3"
    return 1
  fi

  git checkout $(git config --get gitflow.branch.master) || return 1
  git pull --rebase || return 1

  git flow hotfix start $version
}

git_flow_hotfix_finish() {
  __git_flow_assert_clean_tree || return 1

  local version=$(__git_flow_hotfix_branch_name "$1")
  if [ -z "$version" ]; then
    echo "usage: git_flow_hotfix_finish <version>"
    echo "e.g.:"
    echo "     git_flow_hotfix_finish 2.8.3"
    return 1
  fi

  git checkout $(git config --get gitflow.branch.master) || return 1
  git pull --rebase || return 1

  git checkout $(git config --get gitflow.branch.develop) || return 1
  git pull --rebase || return 1

  git checkout $(git config --get gitflow.prefix.hotfix)$version || return 1
  git pull --rebase || return 1

  git flow hotfix finish $version

  git push --all origin
  git push --tags origin
}

#
# Aliases
#
alias gffs=git_flow_feature_start
alias gfff=git_flow_feature_finish
alias gfrs=git_flow_release_start
alias gfrf=git_flow_release_finish
alias gfhs=git_flow_hotfix_start
alias gfhf=git_flow_hotfix_finish
